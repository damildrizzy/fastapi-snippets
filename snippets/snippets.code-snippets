{
    "FastAPI hello world": {
        "prefix": "hw",
        "body": [
            "from fastapi import FastAPI",
            "app = FastAPI()",
            "",
            "@app.get('/')",
            "async def root():",
            "    return {'message': 'Hello World'}"
        ]
    },
    "FastAPI GET path": {
        "prefix": "path",
        "body": [
            "@app.get('/${1:path_name}')",
            "def ${2:method_name}():",
            "    pass$0"
        ]
    },
    "async FastAPI GET path": {
        "prefix": "apath",
        "body": [
            "@app.get('/${1:path_name}')",
            "async def ${2:method_name}():",
            "    pass$0"
        ]
    },
    "FastAPI POST path": {
        "prefix": "pathp",
        "body": [
            "@app.post('/${1:path_name}')",
            "def ${2:method_name}():",
            "    pass$0"
        ]
    },
    "async FastAPI POST path": {
        "prefix": "apathp",
        "body": [
            "@app.post('/${1:path_name}')",
            "async def ${2:method_name}():",
            "    pass$0"
        ]
    },
    "async FastAPI GET with Pydantic schemas": {
        "prefix": "apathpyd",
        "body": [
            "from fastapi import Request",
            "from pydantic import BaseModel",
            "",
            "class ExampleResponseSchema(BaseModel):",
            "    response_field: str",
            "",
            "class ExamplePayloadSchema(BaseModel):",
            "    example_field: str",
            "",
            "@app.get(path='/path_name', response_model=ExampleResponseSchema)",
            "async def method_name(payload: ExamplePayloadSchema) -> Any:",
            "    payload_field = payload.example_field",
            "    return payload_field.upper()",
        ]
    },
    "SQLAlchemy Database": {
        "prefix": "sqldb",
        "body": [
            "from sqlalchemy import create_engine",
            "from sqlalchemy.ext.declarative import declarative_base",
            "from sqlalchemy.orm import sessionmaker",
            "",
            "SQLALCHEMY_DATABASE_URL = '${1:db_url}'",
            "",
            "engine = create_engine(SQLALCHEMY_DATABASE_URL)",
            "",
            "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
            "",
            "Base = declarative_base()"
        ]
    },
    "SessionLocal Dependency": {
        "prefix": "getdb",
        "body": [
            "def get_db():",
            "   db = SessionLocal()",
            "   try:",
            "       yield db",
            "   finally:",
            "       db.close()"
        ]
    },
    "Startup Event": {
        "prefix": "stup",
        "body": [
            "@app.on_event('startup')",
            "async def on_startup():",
            "    pass$0"
        ]
    },
    "Shutdown Event":{
        "prefix": "shdn",
        "body": [
            "@app.on_event('shutdown')",
            "async def on_shutdown():",
            "    pass$0"
        ]
    }
}